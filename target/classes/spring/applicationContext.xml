<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--spring配置文件-->

    <!--指定数据库属性配置文件-->
    <context:property-placeholder location="classpath:properties/jdbc.properties" />

    <!--声明组件扫描器-->
    <context:component-scan base-package="com.bjpowernode.crm.settrings.service" />
    <context:component-scan base-package="com.bjpowernode.crm.workbench.service" />

    <!--声明dataSource-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>

    <!--声明SqlSessionFactoryBean-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" >
        <property name="dataSource" ref="dataSource" />
        <!--引入mybatis的配置文件-->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
    </bean>

    <!--声明mybatis的扫描器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.bjpowernode.crm.workbench.dao,com.bjpowernode.crm.settrings.dao" />
    </bean>

    <!--事务配置    声明式事务：在源码之外，控制事务，声明事务管理器，指定完成事务的具体实体类，commit，rollback-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--指定数据源-->
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!--配置通知（切面）：指定方法使用的事务属性    id:自定义的通知名称  transaction-manager:事务管理器-->
    <tx:advice id="myAdivce" transaction-manager="transactionManager">
        <tx:attributes>
            <!--指定方法的事务属性：  name：方法的名称  isolation：隔离级别  propagation：传播的行为
                rollback-for：回滚的异常类，对于自定义的异常要使用全限定名称，系统的异常类名称
            -->
            <tx:method name="save*" isolation="DEFAULT" propagation="REQUIRED"
                       rollback-for="com.bjpowernode.crm.exception.AjaxRequestException,
                       com.bjpowernode.crm.exception.TraditionRequestException" />
            <tx:method name="update*" isolation="DEFAULT" propagation="REQUIRED"
                       rollback-for="com.bjpowernode.crm.exception.AjaxRequestException,
                       com.bjpowernode.crm.exception.TraditionRequestException" />
            <tx:method name="delete*" isolation="DEFAULT" propagation="REQUIRED"
                       rollback-for="com.bjpowernode.crm.exception.AjaxRequestException,
                       com.bjpowernode.crm.exception.TraditionRequestException" />
            <!--除了上面的方法以外的，其他方法-->
            <tx:method name="*" propagation="SUPPORTS" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <!--配置aop-->
    <aop:config>
        <!--指定切入点-->
        <aop:pointcut id="servicePt" expression="execution(* *..sercice..*.*(..))"/>
        <!--配置增强对象（通知+切入点）-->
        <aop:advisor advice-ref="myAdivce" pointcut-ref="servicePt" />
    </aop:config>
</beans>